// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler.go
//
// Generated by this command:
//
//	mockgen -source=./handler.go -destination=./mocks/mock_handler.go -package=mocks . AssessClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	client "github.com/coderavels/upworkassessment/client"
	gomock "go.uber.org/mock/gomock"
)

// MockAssessClient is a mock of AssessClient interface.
type MockAssessClient struct {
	ctrl     *gomock.Controller
	recorder *MockAssessClientMockRecorder
	isgomock struct{}
}

// MockAssessClientMockRecorder is the mock recorder for MockAssessClient.
type MockAssessClientMockRecorder struct {
	mock *MockAssessClient
}

// NewMockAssessClient creates a new mock instance.
func NewMockAssessClient(ctrl *gomock.Controller) *MockAssessClient {
	mock := &MockAssessClient{ctrl: ctrl}
	mock.recorder = &MockAssessClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssessClient) EXPECT() *MockAssessClientMockRecorder {
	return m.recorder
}

// GetBook mocks base method.
func (m *MockAssessClient) GetBook(bookISBN string) (client.BookDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", bookISBN)
	ret0, _ := ret[0].(client.BookDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockAssessClientMockRecorder) GetBook(bookISBN any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockAssessClient)(nil).GetBook), bookISBN)
}

// GetBooks mocks base method.
func (m *MockAssessClient) GetBooks() ([]client.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks")
	ret0, _ := ret[0].([]client.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockAssessClientMockRecorder) GetBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockAssessClient)(nil).GetBooks))
}
