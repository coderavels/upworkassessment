// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go
//
// Generated by this command:
//
//	mockgen -source=./main.go -destination=./mocks/mock.go -package=mocks . Handler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
	isgomock struct{}
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// GetBookCollection mocks base method.
func (m *MockHandler) GetBookCollection(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBookCollection", w, r)
}

// GetBookCollection indicates an expected call of GetBookCollection.
func (mr *MockHandlerMockRecorder) GetBookCollection(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookCollection", reflect.TypeOf((*MockHandler)(nil).GetBookCollection), w, r)
}

// ListBooks mocks base method.
func (m *MockHandler) ListBooks(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListBooks", w, r)
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockHandlerMockRecorder) ListBooks(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockHandler)(nil).ListBooks), w, r)
}
